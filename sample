backend

app.get("/getupdatedata/:id",async(req,res)=>{
  try{
    const {id} = req.params;
    let requrieddata=await RecoveryData.findById(id);
    console.log(requrieddata);
    console.log('can able to get submitted data')
   res.status(200).json(
      requrieddata
  );
  
  }catch(e){
    return res.status(404).json({
      status: "Failure",
      message: e.message
    })
  }
})

app.post("/data",async(req,res)=>{
  try{
    const{CID_European,CID_American,CID_Asian,STP_FLS,STP_SLS,EEE_NW,SAN_E2C,User}=req.body;
        const updateInfo=new RecoveryData({CID_European,CID_American,CID_Asian,STP_FLS,STP_SLS,EEE_NW,SAN_E2C,User});
    console.log(updateInfo)
     const saveData=await updateInfo.save();
     console.log(saveData,"get all the updated post data");
    console.log('getdata')
    res.status(201).send(saveData);
  }catch(error){
    console.log(error.message);
    res.status(500).json({message: error.message})
  }
})


// put update
app.put('/data/:id', async (req, res) => {
  const { id } = req.params;
  const newData = req.body;
 console.log(newData);
  try {
      const updatedData = await RecoveryData.findByIdAndUpdate(id, newData, { new: true });
      if (!updatedData) {
          return res.status(404).send({ error: 'Data not found' });
      }
      res.send(updatedData);
      console.log("can able to get edited data")
  } catch (error) {
      res.status(400).send(error);
  }
});





//frontend
 <form name="regForm"  id="myForm" onsubmit="event.preventDefault()">
                             
                              <p style="margin-bottom:0px;display: flex;flex-direction: row;align-items: center;"> 
                                <label for="CID_European" style="width:200px;font-size: 12px;"><strong>CID(Europeantime):</strong></label>
                                <input type="text" id="CID_European"  name="cideurope" placeholder="CID(European time)" value="Pradeep Kumar Jonnalagadda" disabled/>
                              </p>
           
                              <p style="margin-bottom:0px;display: flex;flex-direction: row;align-items: center;"> <label for="CID_American" style="width:200px;font-size: 12px;"><strong>CID(Americantime):</strong></label>
                                <input type="text" id="CID_American" name="cidamerica" placeholder="CID(American time)" value="Suraj Ghosh"  disabled>

                                </p>
                              <p style="margin-bottom:0px;display: flex;flex-direction: row;align-items: center;"> <label for="CID_Asian" style="width:200px;font-size: 12px;"><strong>CID(Asiantime):</strong></label><input type="text" id="CID_Asian" name="cidasian" placeholder="CID(Asian time)" value="Sunny Sun B"  disabled>
                              </p>
                              <p style="margin-bottom:0px;display: flex;flex-direction: row;align-items: center;"> <label for="STP_FLS" style="width:200px;font-size: 12px;"><strong>STP FLS:</strong></label><input type="text" id="STP_FLS" name="stpfls" placeholder="STP_FLS" value="Manu Kumar" disabled>
                                </p>
                                <p style="margin-bottom:0px;display: flex;flex-direction: row;align-items: center;"> <label for="STP_SLS" style="width:200px;font-size: 12px;"><strong>STP SLS:</strong></label><input type="text" id="STP_SLS" name="stpsls" placeholder="STP_SLS"    value="Johan Karlsson"disabled>
                                </p>
                              <p style="margin-bottom:0px;display: flex;flex-direction: row;align-items: center;"> <label for="EEE_NW" style="width:200px;font-size: 12px;"><strong>EEE NW:</strong></label><input type="text" id="EEE_NW" name="eeenw" placeholder="EEE_NW" value="Karen Monet"  disabled>
                                </p>
                              <p style="margin-bottom:0px;display: flex;flex-direction: row;align-items: center;"> <label for="SAN_E2C" style="width:200px;font-size: 12px;"><strong>SAN E2C:</strong></label><input type="text" id="SAN_E2C" name="sane2c" placeholder="SAN_E2C" value="Elisabet Moreria" disabled>
                                </p>
                              <p style="margin-bottom:0px;display: flex;flex-direction: row;align-items: center;"> <label for="User" style="width:200px;font-size: 12px;"><strong>USER:</strong></label><input type="text" id="User" name="user" placeholder="User" value="Vijay Kumar"  disabled>
                              </p>
                               
                              <button type="edit" class="btn" id="edit" onclick="EditForm()">Edit</button>
                              <button type="submit" class="btn" id="submit" onclick="submitform(event)" formtarget="_self">Submit</button>   </form>



//js part frontend

async function openPopup(key) {
  // event.preventDefault();
  try{
   
    fetch('http://localhost:3000/jira-data', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',

      },
      body: JSON.stringify(
        {
          "jql": "project = DE3 AND labels in (CRITICAL,Critical,critical) and resolution = Unresolved ORDER BY created DESC",
          "startAt": 0,
          "maxResults": 1000
        })
    })
      .then((res) => {
        return res.json()
        
      }).then((data) => {
        document.body.innerHTML += ('Response data', data)
        console.log(data);
        populateFormFields();
        const popupContent = document.getElementById("popupContent");
        let popupContentHTML = "";
            data.issues.forEach((issue) => {
              if (issue.key == key) {
                
                history.pushState(
                  null,
                  null,
                  `http://localhost:5502/frontend/FrontOffice.html?ticket#=${issue.key}`
                );
        
                updateTimeline(key);
        
                rcadata(key);

                // setTimeout(()=>{
                //   alert("data is loading")
                  
                // },1000)
               document.getElementById("edit").addEventListener("click",EditForm)

                
                  document.getElementById("submit").addEventListener("click",submitform)
                
              
               
                console.log("Ticket ID;,ticketKey");
                
                const issuedata = data.issues;
                 for (let i = 0; i < issuedata.length; i++) {
                  if(issue.key==key){
                    console.log("i loop is calling",i)
                     const issue_data  = issuedata[i];
                    console.log(issue_data)
                    const field=issue_data.fields;  //contains all de3 tickets here
                    if(field){
                      console.log("fields present");
                      if(field.issuelinks && field.issuelinks.length>0){
                        console.log("issue link is present");
                        const issueLinks = field.issuelinks;
                        localStorage.setItem("issuelinklinks",issueLinks)
                        console.log(issueLinks);
                        let issueLink=[];
                        
                        for (let j = 0; j < issueLinks.length; j++) {
                          console.log("j loop is calling")
                          const outwardIssue=issueLinks[j].outwardIssue;
                          console.log(issueLinks[j]);
                          if(outwardIssue && outwardIssue.key){
                            issueLink.push(outwardIssue.key);
                         
                            console.log(outwardIssue.key);
                          }else{
                            console.log(" Issue link key not found");
                          
                          }
                          localStorage.setItem("issueLinks",JSON.stringify(issueLink) )
                      if(issueLink.length===0){
                     
                      console.log("No inward issue key found for any link in this ticket")
                    
                  
                   }
                      }
                      }else{
                        console.log("No issue links found")
                      }
                     
                    }else{
                      console.log("No fields found for this issue");
                    }
                   
                   
                   }
                  }
                  popupContentHTML += ` <p><strong>RCA &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</strong> 
                   <a href="https://eteamspace.internal.ericsson.com/pages/viewpage.action?spaceKey=PB&title=EPS+Ongoing+High+Severity+Incidents">     
                   EPS Ongoing High Severity Incidents</p>` 
                        
              //  popupContent.innerHTML=popupContentHTML;
   
                // if (issue.fields.issuelinks && issue.fields.issuelinks.outwardIssue.key) {
                //     rcaIssueKey = issue.fields.issuelinks.outwardIssue.key || '';

                //     console.log(issue.fields);
                // console.log(issue.fields.issuelinks.outwardIssue);
                // }
                
                // console.log(rcaIssueKey)
                if(popupContentHTML===''){
                  console.log('no inward issue')
                }
                
               
                popupContentHTML += `
                <p><b>Incident</b> &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<a href="https://eteamproject.internal.ericsson.com/servicedesk/customer/portal/1/${issue.key}">:${issue.key}</a></h3>
                <p style="white-space:nowrap; overflow:hidden;"><strong>Summary</strong> &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;:  ${issue.fields.summary}</p>
                <p><strong>Incident Priority &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>:${issue.fields.priority.name}</p>
               
                <p><strong>Reporter &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>:${issue.fields.reporter.displayName}</p>
                <p><strong>Assignee &nbsp; &nbsp;&nbsp; &nbsp;  &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;&nbsp;&nbsp;</strong>:${issue.fields.assignee.displayName}</p>
                <p><strong>Incident Reported &nbsp; &nbsp;&nbsp;&nbsp; </strong>:${issue.fields.created}</p>
               
                <p><strong>Labels &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>:${issue.fields.labels}</p
                <p><strong>First Response Time &nbsp;&nbsp;&nbsp;</strong>:${issue.fields.customfield_14112}</p>
         
                <p><strong>Time To Resolution &nbsp;&nbsp;&nbsp; </strong>:${issue.fields.customfield_13913.ongoingCycle.goalDuration.friendly}</p>
                <p><strong>User Origination &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </strong>:${issue.fields.customfield_12650.value}</p>
                
                                            `;
                                            const outwardIssue = JSON.parse(localStorage.getItem("issueLinks"));
                                            const issueLinklink=localStorage.getItem("issuelinklinks")
                                    if (outwardIssue && issueLinklink.length > 0) {
                                      outwardIssue.forEach((eepsTicket) => {
                                        popupContentHTML += `<p><strong>RCA &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</strong>${eepsTicket}</p>`;
                                      });
                                    } else {
                                      if(issueLinklink.length==0){
                                      popupContentHTML += `<p><strong>RCA &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</strong><a href="https://eteamspace.internal.ericsson.com/pages/viewpage.action?spaceKey=PB&title=EPS+Ongoing+High+Severity+Incidents">EPS Ongoing High Severity Incidents</a></p>`;
                                    }
                                    else{
                                      
                                    }
                                  }
                      
                
              } else {
              }
        // <p><strong>RCA &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</strong>      
        // ${outwardIssue}</p>
                
              // const popupContainer=document.getElementById('popupContainer')<p><strong>RCA &nbsp; &nbsp; &nbsp; &nbsp; </strong>:${issue.fields.issuelinks.outwardIssue.key}</p>  if (issue.fields.issuelinks && issue.fields.issuelinks.length > 0) {
              //   // Check if the outwardIssue exists
              //   if (issue.fields.issuelinks[0].outwardIssue) {
        
              //       const outwardIssueKey = issue.fields.issuelinks[0].outwardIssue.key;
        
              //   } else {
        
              //   }
            });
            popupContent.innerHTML = popupContentHTML;
            popupContainer.style.display = "block";
        
      })

  }catch(error){
    console.error("error fetching data", error);
  }
  

    
   
  }




//getmethod submitting the form

async function submitform(event){
 
event.preventDefault();
  const formData={
    CID_European:document.getElementById("CID_European").value,
    CID_American:document.getElementById("CID_American").value,
    CID_Asian:document.getElementById("CID_Asian").value,
    STP_FLS:document.getElementById("STP_FLS").value,
    STP_SLS:document.getElementById("STP_SLS").value,
    EEE_NW:document.getElementById("EEE_NW").value,
    SAN_E2C:document.getElementById("SAN_E2C").value,
    User:document.getElementById("User").value
  }
  console.log(formData);  // here i am able to get updated data after edit
  debugger
  
  try{
    // here i gave static id 
      const response=await fetch(`http://localhost:3000/data`,{
        method:'POST',
        headers:{
          'Content-Type':'application/json'
        },
        body:JSON.stringify(formData)

      })
      const Data=await response.json();
      const id=Data._id;
      localStorage.setItem("updatedid",id) //editable  data id is present
      console.log(' updated data',Data);
      


      
      localStorage.setItem("updatedgetdata",JSON.stringify(Data))
      


        document.getElementById("CID_European").value=Data.CID_European;
      document.getElementById("CID_American").value=Data.CID_American;
      document.getElementById("CID_Asian").value=Data.CID_Asian;
      document.getElementById("STP_FLS").value=Data.STP_FLS;
      document.getElementById("STP_SLS").value=Data.STP_SLS;
      document.getElementById("EEE_NW").value=Data.EEE_NW;
      document.getElementById("SAN_E2C").value=Data.SAN_E2C;
      document.getElementById("User").value=Data.User;
      
      
      // populateFormFields()
      // disabling i/p field
      const form=document.getElementById("myForm");
      
  
    const inputs=form.getElementsByTagName('input');
    console.log(inputs);
   
  for(let i=0;i<inputs.length;i++){
    inputs[i].disabled=true;
    //  alert("form submitted successfully");
   
    
  }
  
  // populateFormFields();

  // const CidForm = document.getElementById("submit").formtarget;
  // console.log(CidForm);
  // document.getElementById('myForm').innerHTML = CidForm;
  }catch(error){
    console.error('Error:',error)
  }
  

    }




//editform
async function EditForm(){
      debugger
      // enable input field -1st test case done
      const form=document.getElementById('myForm');
      const inputs=form.getElementsByTagName('input');
      for(let i=0;i<inputs.length;i++){
        inputs[i].disabled=false;
      }
      const formData={
        CID_European:document.getElementById("CID_European").value,
        CID_American:document.getElementById("CID_American").value,
        CID_Asian:document.getElementById("CID_Asian").value,
        STP_FLS:document.getElementById("STP_FLS").value,
        STP_SLS:document.getElementById("STP_SLS").value,
        EEE_NW:document.getElementById("EEE_NW").value,
        SAN_E2C:document.getElementById("SAN_E2C").value,
        User:document.getElementById("User").value
       }
       console.log(formData,"editable data");
       const id=localStorage.getItem("updatedid")  
       console.log(id,"edited data updated id display here")  ;
    fetch(`http://localhost:3000/data/${id}`).then(response=>response.json())
       .then(data=>{
        console.log('Form data', data);      //i am getting all the data which i have submitted
        document.getElementById("CID_European").value=data.CID_European;
        document.getElementById("CID_American").value=data.CID_American;
        document.getElementById("CID_Asian").value=data.CID_Asian;
        document.getElementById("STP_FLS").value=data.STP_FLS;
        document.getElementById("STP_SLS").value=data.STP_SLS;
        document.getElementById("EEE_NW").value=data.EEE_NW;
        document.getElementById("SAN_E2C").value=data.SAN_E2C;
        document.getElementById("User").value=data.User;
        })
      
    }

//update form
async function populateFormFields(){
  // event.preventDefault()
  // const storedFormData=localStorage.getItem('formData');
  try{
    const id=localStorage.getItem("updatedid")
    console.log(id);;
    if(!id){
      console.log("No updated data");
      return;
    }
const response=await fetch(`http://localhost:3000/getupdatedata/${id}`) ;
if(!response.ok){
  console.log("throw an error");
}
data=await response.json();
console.log('Form data', data);

document.getElementById("CID_European").value=data.CID_European;
document.getElementById("CID_American").value=data.CID_American;
document.getElementById("CID_Asian").value=data.CID_Asian;
document.getElementById("STP_FLS").value=data.STP_FLS;
document.getElementById("STP_SLS").value=data.STP_SLS;
document.getElementById("EEE_NW").value=data.EEE_NW;
document.getElementById("SAN_E2C").value=data.SAN_E2C;
document.getElementById("User").value=data.User;
  }catch(e){
    console.log("there is no updated value is present in the populateForm")
  }
  
  
  
}







